<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="understanding-couchbase-overview">
  
  <title>
    Overview
  </title>
  
  <shortdesc>
    An overview of Couchbase Server's core features.
  </shortdesc>
  
  <body>
    
    <section id="key_elements_and_concepts">
      
      <title>
        Core Features
      </title>
      
    <p>
      This section provides descriptions of Couchbase Server's core features. The descriptions are
      organized as follows:
    </p>
      <p>
        
      </p>
      
      <ul>
        <li>
          <p>
            <b>Data</b>: Couchbase Server stores data as <i>items</i>.
            Each item consists of a <i>key</i>, by which
            the item is referenced; and an associated <i>value</i>, which must be either <i>binary</i> 
            or a <i>JSON document</i>. 
          </p>
          
          <p>
            See
            <xref href="./data/data.dita" scope="local" format="dita">Data</xref> for information.
          </p>
          
          <p>
            
          </p>
        </li>
        
        <li>
          <p>
            <b>Buckets, Memory, and Storage</b>: Items are stored in named <i>Buckets</i>;
            being kept only in memory, others both in memory and on disk. 
          </p>
          
          <p>
            See
            <xref href="./buckets-memory-and-storage/buckets-memory-and-storage.dita" scope="local" format="dita">Buckets, Memory, and Storage</xref>
            for information.
          </p>
          
          <p>
          </p>
        </li>
        
        <li>
          <p>
            <b>Services and Indexes</b>: <i>Services</i> can be deployed to
            support different forms of data-access: 
            for example, the <i>Data Service</i> allows items to be retrieved by <i>key</i>;
            while the <i>Query Service</i> allows them to be retrieved by means of <i>queries</i>, 
            designed in the <i>N1QL</i> query-language. Individual services 
            can be configured to run across multiple cluster-nodes, allowing
            high-priority workloads to be distributed and scaled appropriately. <i>Indexes</i> support
            services, by enabling high-performance access to data.
          </p>
          
          <p>
            See
            <xref href="./services-and-indexes/services-and-indexes.dita" scope="local" format="dita">Services and Indexes</xref> for
            information.
          </p>
          
          <p>
          </p>
        </li>
        
        <li>
          <p>
            <b>Clusters and Availability</b>: A single node running Couchbase Server is considered
            a <i>cluster</i> of one node. As successive nodes are 
            initialized, each can be configured to 
            join the existing cluster. 
          </p>
          
          <p>
            Across the nodes of each cluster, Couchbase data is evenly distributed and replicated: nodes can
            be removed, and node-failure handled, without data-loss. Data can be selected for
            replication across clusters residing in different data centers, to ensure high availability.
          </p>
          
          <p>
            See
            <xref href="./clusters-and-availability/clusters-and-availability.dita" scope="local" format="dita">Clusters and Availability</xref>
            for information.
          </p>
          
          <p>
          </p>
        </li>      

      </ul>
      
    </section>
    
    <section id="couchbase-glossary">
      
      <title>
        Couchbase Glossary
      </title>
      
      <p>
        The following glossary introduces the principal terms that are used in descriptions of Couchbase
        Server-technology.
      </p>
      
      <p>
        
      </p>
      
      <ul>
        <li>
          <b>Availability</b>: The preservation of data from system-failure, by the following means:
          
          <p>
          </p>
          
          <ul>
            <li>
              <b>Intra-Cluster Replication</b>: The maintenance and continuous update of data-copies, 
              distributed across the nodes of a cluster to ensure the least chance of loss in the event of 
              single-node failure.
              
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Cross Data-Center Replication</b> (<i>XDCR</i>): The replication of data between clusters, 
              to ensure the least chance of loss
              in the event of data-center failure, and to provide high-performance data-access 
              for globally distributed applications.
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Data Recovery</b>: The restoration of valid data to a node that is recovered from failure: either
              by updating data still held locally, or by substituting current data from other 
              nodes.
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Backup and Restore</b>: The storing in archive repositories of the current state of data, indexes,
              and bucket configurations; and the restoration of such state to a running
              cluster.
              
              <p>
                
              </p>
            </li>
            
          </ul>
          
          
        </li>
        
        <li>
          <b>Bucket</b>: Logical, user-named entities that group items. There are three types:
          
          <p>
            
          </p>
          
          <ul>
            <li>
              <b>Couchbase</b>: Retains data both in memory and on disk.
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Ephemeral</b>: Retains data in memory only.
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Memcached</b>: Designed to be used alongside other database platforms, such as ones 
              employing relational database technology, in order to cache frequently-used data
              (that is, in memory only).
              
              <p>
                
              </p>
            </li>
            
          </ul>
          
        </li>
        
        <li>
          <b>Cluster</b>: One or more instances of Couchbase Server, 
          each running on an independent node, but sharing and providing a consistent 
          interface to all resources.
          
          <p>
          </p>
        </li>
        
        <li>
          <b>Data</b>: Items, each of which consists of a key
          by which the item is referenced; and an associated value, which must 
          be either binary or a JSON document.
          
          <p>
          </p>
          
          <ul>
            <li>
              <b>Model</b>: A lightweight, flexible schema, according to which information
              is stored in the form of items, and
              which can be progressively evolved by applications over time.
              
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Access</b>: The creation, update, and deletion of items, as supported by the Couchbase Web 
              Console UI and the Couchbase SDK.
              
              <p>
                
              </p>
            </li>
            
          </ul>
          
          
        </li>
        
        <li>
          <b>Deployment</b>: The installation of a single instance of Couchbase Server, preceded as necessary by 
          appropriate resourcing and configuration of an underlying platform; and potentially
          followed by the addition of the initialised instance, with the resources of its host, 
          to a cluster:
          
          <p>
          </p>
          
          <ul>
            <li>
              <b>Native</b>: Couchbase Server runs on an individual, physical machine.
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Cloud</b>: Couchbase Server runs on a pre-established cloud-configuration.
              <p>
                
              </p>
            </li>
            
            <li>
              <b>Container</b>: Couchbase Server runs within a software container or virtual machine, 
              possibly allowing one or more instances to be run on a single physical 
              machine, and formed into one or more clusters.
              <p>
                
              </p>
            </li>
            
          </ul>
        </li>
        
        <li>
          <b>Initialization</b>: The configuration of new instance of Couchbase Server, either as the first
          node in a new cluster, or as an additional node for an existing cluster.
          
          <p>
          </p>
        </li>
        
        <li>
          <b>Memory</b>: An automatically managed caching 
          layer, supporting high-speed data-access. 
          
          <p>
          </p>
        </li>
        
        <li>
          <b>Nodes</b>: A computer (potentially, a virtual machine) running an instance
          of Couchbase Server. 
          
          <p>
          </p>
          
          <ul>
            
            <li>
              <b>Addition</b>: A Couchbase Cluster of one node can be added to another existing cluster,
              so that a single, combined cluster is produced. Following addition, rebalance
              ensures that data and indexes are optimally distributed among all available nodes.
              
              <p>
                
              </p>
              
            </li>
            
            <li>
              <b>Removal</b>: Nodes can be removed from their cluster. Following removal, rebalance
              ensures that data and indexes are optimally distributed among all available nodes.
              
              <p>
              </p>
              
            </li>
            
            <li>
              <b>Failover</b>: If a node goes offline, it can be failed over, so that
              the cluster continues to function with the remaining nodes, potentially
              without data-loss. Rebalance
              ensures that data and indexes are optimally distributed among all available nodes.
              
              <p>
              </p>
              
            </li>
              
            
          </ul>
        </li>
        
        <li>
          <b>Rebalance</b>: The process of re-distributing data and indexes optimally among 
          the available nodes of a cluster. This should be performed whenever a
          cluster-configuration has changed.
          
          <p>
          </p>
        </li>
        
        <li>
          <b>Scaling</b>: The optional allocation of services to cluster-nodes in accordance
          with workload-requirements. For example, if a particular service is expected to 
          handle a heavy workload, it can be allocated a large memory quota, and 
          might be deployed as the only service on its node, to ensure optimal
          availability of CPU cycles.
          
          
          <p>
          </p>
        </li>
        
        <li>
          <b>SDK</b>: Libraries that support cluster-access for applications written in Java, .NET, C, Go, 
          PHP, Python,
          and NodeJs.
          
          <p>
          </p>
        </li>
        
        <li>
          <b>Security</b>: Couchbase-Server Authentication, Authorization, Auditing, and Encryption.
          
          <p>
          </p>
          
            <ul>
              <li>
                <b>Authentication</b>: To access Couchbase Server, administrators and applications must be authenticated. 
                Authentication is a process for identifying a user who is attempting to access 
                a system. Authentication can be attempted by passing credentials, or by means
                of certificates.
                
                <p>
                  
                </p>
              </li>
              
              <li>
                <b>Authorization</b>: Role-Based Access Control (<i>RBAC</i>), whereby access-privileges 
                are assigned to fixed roles that are assigned to administrators and 
                applications.
                <p>
                  
                </p>
              </li>
              
              <li>
                <b>Auditing</b>: The detailed, automated recording of actions performed on Couchbase
                Server; allowing administrative review, in order to ensure that system-management 
                tasks are being appropriately performed.
                <p>
                  
                </p>
              </li>
              
              <li>
                <b>Encryption</b>: SSL/TLS, used to encrypt data passed over the wire. 
                
                <p>
                  
                </p>
              </li>
              
            </ul>
        </li>
        
        <li>
          <b>Services</b>: Couchbase Server-facilities that support different forms of accessing
          and updating data.
          
          <p>
            
          </p>
          
            <ul>
              <li>
                <b>Data</b>: Supports the storing, setting, and retrieving of data-items, specified by key.
                <p>
                  
                </p>
              </li>
              
            </ul>
        </li>
        
      </ul>
        
      
    </section>
    
  </body>
  
</topic>
