<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_frt_5tr_zz">
  
  <title>
    Index Storage Settings
  </title>
  
  <shortdesc>
    A Secondary Index can be saved in either of two ways: <i>standard</i>
    or <i>memory-optmized</i>.    
  </shortdesc>
  
  <body>
    <section id="memopt-gsi2">
      
      <title>
        Memory-Optimized Index Storage
      </title>
      
      <p>
        Memory-optimized storage allows high-speed maintenance and scanning; since the index is
        kept fully in memory at all times. A snapshot of the index is maintained
        on disk, to permit rapid recovery if node-failures are experienced.
        
      </p>
      
      <p>
        Memory-optimized global indexes reside in memory. When a node running the index service
        exceeds the index memory-quota for the node, indexes on the node cannot
        process changes, and an error is flagged. Note that available memory for each Index-Service node
        is provided on the <b>Statistics</b> screen, itself accessible from the <b>Buckets</b> screen in the Couchbase
        Web Console, under <b>Max Index RAM Used %</b>.
      </p>
      
      <p>
        When an Index-Service node has run out of memory, memory-optimized indexes continue in the
        <codeph>ONLINE</codeph> state. However, traffic is routed away from the node. 
      </p>
      
      <p>
        When the node is restarted, the indexes are rebuilt from the snapshot retained on disk. 
        The indexes remain in the <codeph>BUILDING</codeph> state 
        until all information has been read into memory: then, final updates occur with the indexes in ONLINE state.
        From this point, queries with <codeph>consistency=request_plus</codeph> or
        <codeph>consistency=at_plus</codeph> fail, if the timestamp specified exceeds the last
        timestamp processed by the specific index on the node. However, queries with
        <codeph>consistency=unbounded</codeph> execute normally.
      </p>
      
      <p>
        The following measures may be considered, in order to recover from an out-of-memory situation: 
      </p>
      
      <p>
      </p>
        
        <ul id="ul_aps_f5g_sw2">
          
          <li>
            Increase the index-memory quota, to give indexes additional memory
            to process requests.
            
            <p>
            </p>
          </li>
          
          <li>
            Drop less important indexes from the node, to free up memory. 
            
            <p>
            </p>
          </li>
          
          <li>
            Drop buckets with indexes. Dropping a bucket automatically drops all the dependent
            indexes, and has the same effect as dropping all indexes on a bucket.
            
            <p>
            </p>
          </li>
          
          <li>
            Flush buckets with indexes. Flushing a bucket deletes all data in a bucket. Even if
            there are pending updates that are not processed, flushing a bucket causes all indexes
            to drop their data. 
            
            <p>
              Note that deleting data selectively from buckets does
              not decrease memory usage, during an out-of-memory condition: such deletions are
              mutations, which cannot be processed.
            </p>
              
            <p>
            </p>
          </li>
          
        </ul>
        
 
      
    </section>
    
    <section id="std-gsi2">
      
      <title>
        Standard Index Storage
      </title>
      
      <p>
        <i>Standard</i> is the default storage-setting for Secondary Indexes: the indexes are
        saved on disk; in a disk-optimized format that uses both memory and disk for index-maintenance
        and scanning.
      </p>
      
      
      <p>
        The performance of standard index storage
        depends on overall I/O performance. Each index saved with the <i>standard</i> option
        has two write modes: 
      </p>
        
        <ul>
          <li>
            <b>Append-only Write Mode</b>: Similar to disk-writes
            implemented in the data service. All changes are written to the
            end of the index-file, invalidating
            existing pages within the index file, and requiring frequent, full compaction.
            
            <p>
            </p>
          </li>
          
          <li>
            <b>Circular Write Mode</b>: Writes changes to the end of the index-file, until
            the relative index fragmentation (<codeph>stale
            data size</codeph> / <codeph>total file size</codeph>) exceeds 65%. <i>Block reuse</i> is
            then triggered: which means that new data is written into stale blocks where possible,
            rather than to the end of the file, optimizing I/O throughput.
            Full compaction is run once a day on each of the days specified as part of the
            <i>circular mode time interval setting</i>: note, however, that the index fragmentation
            data size will likely not decrease.
            
            <p>
            </p>
            
          </li>
          
        </ul>
      
       <p>
        By default, Couchbase Server uses Circular Write Mode for standard index storage. Append-only
        Write Mode is provided for backward compatibility with previous versions.
      </p>
      
      <p>
        When assigning indexes to nodes, note the disk I/O bandwidth on the node;
        as well as figures for CPU, memory, and other resources.
      </p>
      
    </section>
    

    <section>
      
      <title>
        Changing the Index Storage Setting
      </title>
      
      <p>
        The <b>Index Storage Setting</b>
        is a cluster-level setting, established at cluster-initialization for
        all indexes on the cluster, across all buckets. The setting
        cannot be changed dynamically. To change from one option to the other following
        cluster-initialization, all nodes running the Index Service must be removed. If
        the cluster is single-node, this means uninstalling and reinstalling Couchbase
        Server. When the cluster features multiple nodes, only a subset of which contain
        the Index Service, the 
        procedure is as follows:
      </p>
      
      <p>
        
      </p>
        
        <ol>
          <li>
            Identify the nodes running the Index Service. 
            
            <p>
            </p>
          </li>
          
          <li>
            Remove each of the nodes running the Index Service, and perform a cluster rebalance.
            
            <p>
            </p>
            
            <p>
            As Index-Service node are removed, so are the indexes they contain; and in consequence,
            any ongoing queries fail. 
           
            </p>
            
            <p>
            </p>
          </li>
          
          <li>
            Once all Index-Service nodes are removed, change the Index Storage Settings for the
            cluster, by means of the <b>Settings</b> page in Couchbase Web Console.
          </li>
          
          <li>
            Add new Index-Service, nodes and confirm the revised storage mode. 
            
            <p>
              
            </p>
          </li>
          
        </ol>

      
    </section>
  </body>
</topic>
