<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Concept//EN" "topic.dtd">
<topic id="index_service">
 
 <title>Index Service</title>
 
 <shortdesc>
  The <i>Index Service</i> supports the creation of <i>primary</i> and <i>secondary</i> indexes
  on items stored within Couchbase Server. The indexes are used by the <i>Query Service</i>, which
  itself supports queries made by the <i>N1QL</i> query language. Use of the Index and Query services
  depends on the presence of at least one instance of the <i>Data Service</i> on the Couchbase
  Server-cluster.
 </shortdesc>
 
 <body>
  
  <section>
   
   <title>
    Index Service Architecture
   </title>
  
    <p>
     Components essential for the <i>Index Service</i> reside on not only on
     each node to which the Index Service is assigned, but also to each node to which the
     <i>Data Service</i> is assigned, as shown by the following illustration:
    </p>
   
   <p>
    <image href="./images/indexServiceArchitecture.png" id="index_service_architecture" align="left" width="700"/>
   </p>
   
   <p>
    The illustration depicts the following:
   </p>
   
   <p>
   </p>
   
   <ul>
    <li>
     <b>Data Service</b>: Must run on at least one cluster-node. The Data Service
     uses the DCP protocol to stream data-mutations 
     to the <b>Projector and Router</b>
     process, which handles communications with the Index Service.
     <p>
      
     </p>
    </li>
    
    <li>
     <b>Projector and Router</b>: Although it is part of the Index Service, one instance of this
     program runs on each node that has been assigned the Data Service. The program
     provides data to the Index Service, according to the expressed interests of the
     Index Service.
     
     <p>
      When the <b>Projector and Router</b> starts running on the Data Service-node,
      the Data Service streams to the <b>Projector and Router</b> copies of all 
      mutations that occur to bucket-items. Prior to the creation of any indexes, the
      <b>Projector and Router</b> takes no action.
     </p>
     
     <p>
      When an index is first created, the Index Service contacts the <b>Projector and
      Router</b>; and passes to it the corresponding index-definitions. The <b>Projector and Router</b>
      duly contacts the Data Service, and 
      extracts data from the fields specified by the index-definitions. It then sends the
      data to the Index Service, so that the index can be populated.
     </p>
     
     <p>
      Subsequently, the <b>Projector and Router</b> continuously examines the stream of mutations provided
      by the Data Service. When this includes a mutation to an indexed field, the mutated data is
      passed by the <b>Projector and Router</b> to the Index Service, and the index thereby
      updated.
     </p>
     
     <p>
      
     </p>
    </li>
    
    <li>
     <b>Supervisor</b>: 
     
     <p>
      
     </p>
    </li>
    
    <li>
     
     <p>
      
     </p>
    </li>
    
    </ul>
   
   <p>
   </p>
   
   <ul>
    <li>
     <b>Listeners</b>: Concurrent query requests are received on ports 8093 and 18093 (for more information
     on port-allocation, see
     <xref href="../../../install/install-ports.dita" scope="local" format="dita">Network Configuration</xref>).
     <p>
      
     </p>
    </li>
    
    <li>
     <b>Query Processor</b>: Responsible for applying the <b>Parser</b> to incoming queries, in order to 
     determine whether each is a valid statement. Also employs the <b>Optimizer</b>, which evaluates available
     execution paths, so determining the path of lowest latency; generates a query-execution plan that uses
     the lowest-latency path; and assembles the plan into a series of operators. The <b>Execution Engine</b>
     receives the operators, and executes them &#8212; in parallel where possible.
     <p>
      
     </p>
    </li>
    
    <li>
     <b>Data Stores</b>: Provides access to various data-sources. The <b>Couchbase Server</b> store is used to
     access the data and indexes on Couchbase Server, and to handle authentication. Other data stores are also
     included, such as the store for the local filesystem.
     <p>
      
     </p>
    </li>
    
   </ul>
  
  </section>
  
  <section>
   <title>
    Query Execution
   </title>
   
   <p>
    The sequence whereby queries are executed is shown below:
   </p>
   
   <p>
    <image href="./images/querySequence.png" id="query_sequence" align="left" width="820"/>
   </p>
   
   <p>
    The client's N1QL query is shown entering the Query Service at the left-hand side. The Query Processor performs
    its <b>Parse</b> routine, to validate the submitted statement, then creates the execution <b>Plan</b>. <b>Scan</b> operations 
    are then performed on the relevant index, by accessing the <b>Index Service</b>. Next, <b>Fetch</b>
    operations are performed by accessing the <b>Data Service</b>, and the data duly returned is used in <b>Join</b> operations.
    The Query Service continues by performing additional processing, which includes <b>Filter</b>, <b>Aggregate</b>, and
    <b>Sort</b> operations. Note the degree of parallelism with which operations are frequently performed, indicated in
    the diagram by groups of right-pointing arrows.
   </p>
   
  </section>
  
  <section>
   
   <title>
    Using N1QL
   </title>
   
   <p>
    The Query Service supports queries made in the <i>N1QL</i> query language. As well as providing a rich
    variety of query-options, N1QL allows statements to be <i>prepared</i>, so that the parsing
    and compiling of plans is completed prior to execution; and permits <i>consistency-levels</i> to be
    configured. For detailed information, see
    <xref href="../../../sdk/n1ql-query.dita" scope="local" format="dita">Querying with N1QL</xref>.
   </p>
   
  </section>
  
 </body>
</topic>
